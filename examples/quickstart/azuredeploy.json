{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
	"contentVersion": "1.2.0.0",
	"parameters": {
		"templateBaseUrl": {
			"defaultValue": "https://cdn.f5.com/product/cloudsolutions/",
			"metadata": {
				"description": "The publicly accessible URL where the linked ARM templates are located."
			},
			"type": "string"
		},
		"artifactLocation": {
			"defaultValue": "[concat('f5-azure-arm-templates-v2/v', deployment().properties.template.contentVersion, '/examples/')]",
			"metadata": {
				"description": "The directory, relative to the templateBaseUrl, where the modules folder is located."
			},
			"type": "string"
		},
		"uniqueString": {
			"metadata": {
				"description": "A prefix that will be used to name template resources. Because some resources require globally unique names, we recommend using a unique value."
			},
			"type": "string"
		},
		"image": {
			"defaultValue": "f5-networks:f5-big-ip-best:f5-bigip-virtual-edition-25m-best-hourly-f5:15.1.200000",
			"metadata": {
				"description": "2 formats accepted. URN of the image to use in Azure marketplace or id of custom image. Example URN value: f5-networks:f5-big-ip-byol:f5-big-ltm-2slot-byol:15.1.002000. You can find the URNs of F5 marketplace images in the README for this template or by running the command: az vm image list --output yaml --publisher f5-networks --all. See https://clouddocs.f5.com/cloud/public/v1/azure/Azure_download.html for information on creating custom bigip image."
			},
			"type": "string"
		},
		"instanceType": {
			"defaultValue": "Standard_DS2_v2",
			"metadata": {
				"description": "Enter valid instance type."
			},
			"type": "string"
		},
		"sshKey": {
			"metadata": {
				"description": "Supply the public key that will be used for SSH authentication to the BIG-IP and application virtual machines."
			},
			"type": "string"
		},
		"appContainerName": {
			"defaultValue": "f5devcentral/f5-demo-app:1.0.1",
			"metadata": {
				"description": "The docker container to use when deploying the example application."
			},
			"type": "string"
		},
		"numNics": {
			"allowedValues": [
				1,
				2,
				3
			],
			"defaultValue": 3,
			"metadata": {
				"description": "Enter valid number of network interfaces to create on the BIG-IP VE instance."
			},
			"type": "int"
		},
		"usePublicMgmtAddress": {
			"defaultValue": true,
			"metadata": {
				"description": "Enter true to set management interface with public IP address. In most production environments this would be set to false."
			},
			"type": "bool"
		},
		"numberPublicExternalIPAddresses": {
			"allowedValues": [
				1,
				2,
				3,
				4
			],
			"defaultValue": 3,
			"metadata": {
				"description": "Enter valid number of external public IP addresses to create on the BIG-IP VE instance."
			},
			"type": "int"
		},
		"restrictedSrcAddressMgmt": {
			"metadata": {
				"description": "When creating management security group, this field restricts management access to a specific network or address. Enter an IP address or address range in CIDR notation, or asterisk for all sources."
			},
			"type": "string"
		},
		"bigIpRuntimeInitConfig": {
			"defaultValue": "https://raw.githubusercontent.com/F5Networks/f5-azure-arm-templates-v2/master/examples/quickstart/bigip-configurations/runtime-init-conf-payg.yaml",
			"metadata": {
				"description": "Supply a URL to the bigip-runtime-init configuration file in YAML or JSON format, or an escaped JSON string to use for f5-bigip-runtime-init configuration."
			},
			"type": "string"
		},
		"useAvailabilityZones": {
			"defaultValue": false,
			"metadata": {
				"description": "This deployment can deploy resources into Azure Availability Zones (if the region supports it).  If that is not desired the input should be set 'No'. If the region does not support availability zones the input should be set to No."
			},
			"type": "bool"
		},
		"tagValues": {
			"defaultValue": {
				"application": "APP",
				"cost": "COST",
				"environment": "ENV",
				"group": "GROUP",
				"owner": "OWNER"
			},
			"metadata": {
				"description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
			},
			"type": "object"
		}
    },
	"variables": {
        "deploymentApiVersion": "2019-05-10",
		"contentVersion": "[deployment().properties.template.contentVersion]",
        "uniqueString": "[toLower(parameters('uniqueString'))]",
		"adminUsername": "azureuser",

		"numSubnets": "[if(variables('provisionApp'), add(parameters('numNics'), 1), parameters('numNics'))]",
		"virtualNetworkName": "[concat(variables('uniqueString'), '-vnet')]",
		"vnetAddressPrefix": "10.0",

		"externalLoadBalancerName": "None",
		"internalLoadBalancerName": "None",
		"internalLoadBalancerProbePort": "3456",
		"internalSubnetId": "",
		"loadBalancerRulePorts": [],
		"mgmtNsgRulesArray": [{"destinationPortRanges":["22","[if(equals(parameters('numNics'), 1), '8443', '443')]"],"sourceAddressPrefix":"[parameters('restrictedSrcAddressMgmt')]","protocol":"Tcp"}],
		"nsg1RulesArray": [{"destinationPortRanges":["80","443"],"sourceAddressPrefix":"*","protocol":"Tcp"}],
		"nsg2RulesArray": [{"destinationPortRanges":["80","443"],"sourceAddressPrefix":"*","protocol":"Tcp"}],
		"nsg0": "[if(equals(parameters('numNics'), 1), union(variables('mgmtNsgRulesArray'), variables('nsg1RulesArray'), variables('nsg2RulesArray')), variables('mgmtNsgRulesArray'))]",
		"nsg1": "[if(greaterOrEquals(parameters('numNics'), 2), variables('nsg1RulesArray'), createArray())]",
		"nsg2": "[if(greaterOrEquals(parameters('numNics'), 3), variables('nsg2RulesArray'), createArray())]",

		"provisionApp": "[not(empty(parameters('appContainerName')))]",
		"appInstanceName": "appvm01",
		"appInstanceType": "Standard_D2s_v3",
		"cloudInitDeliveryLocation": "",

		"mgmtSelfIp": "10.0.0.4",
		"nic1SelfIp": "10.0.1.4",
		"nic2SelfIp": "10.0.2.4",
		"nic1ServiceIPSubnetIndex": "[if(equals(parameters('numNics'), 1), '0', '1')]",
		"nic2ServiceIPSubnetIndex": "[if(equals(parameters('numNics'), 1), '0', '2')]",
		"nic1ServiceIP1": "[concat('10.0.', variables('nic1ServiceIPSubnetIndex'), '.10')]",
		"nic1ServiceIP2": "[concat('10.0.', variables('nic1ServiceIPSubnetIndex'), '.11')]",
		"nic1ServiceIP3": "[concat('10.0.', variables('nic1ServiceIPSubnetIndex'), '.12')]",
		"nic2ServiceIP1": "[concat('10.0.', variables('nic2ServiceIPSubnetIndex'), '.20')]",
		"vmName": "[concat(variables('uniqueString'), '-vm')]"
    },
	"resources": [
		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "[variables('deploymentApiVersion')]",
			"name": "networkTemplate",
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[concat(parameters('templateBaseUrl'), parameters('artifactLocation'), 'modules/network/network.json')]",
					"contentVersion": "[variables('contentVersion')]"
				},
				"parameters": {
					"numSubnets":{ "value": "[variables('numSubnets')]" },
					"virtualNetworkName":{ "value": "[variables('virtualNetworkName')]" },
					"vnetAddressPrefix":{ "value": "[variables('vnetAddressPrefix')]" },
					"createNatGateway":{ "value": "[if(parameters('usePublicMgmtAddress'), false(), true())]" },					
					"tagValues":{ "value": "[parameters('tagValues')]" }
				}
			}
		},
		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "[variables('deploymentApiVersion')]",
			"name": "dagTemplate",
			"dependsOn": [
				"networkTemplate"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[concat(parameters('templateBaseUrl'), parameters('artifactLocation'), 'modules/dag/dag.json')]",
					"contentVersion": "[variables('contentVersion')]"
				},
				"parameters": {
					"dnsLabel":{ "value": "[variables('uniqueString')]" },
					"externalLoadBalancerName":{ "value": "[variables('externalLoadBalancerName')]" },
					"internalLoadBalancerName":{ "value": "[variables('internalLoadBalancerName')]" },
					"internalLoadBalancerProbePort":{ "value": "[variables('internalLoadBalancerProbePort')]" },
					"internalSubnetId":{ "value": "[variables('internalSubnetId')]" },
					"loadBalancerRulePorts":{ "value": "[variables('loadBalancerRulePorts')]" },
					"nsg0":{ "value": "[variables('nsg0')]" },
					"nsg1":{ "value": "[variables('nsg1')]" },
					"nsg2":{ "value": "[variables('nsg2')]" },
					"numberPublicExternalIPAddresses":{ "value": "[parameters('numberPublicExternalIPAddresses')]" },
					"numberPublicMgmtIPAddresses":{ "value": "[if(parameters('usePublicMgmtAddress'), 1, 0)]" },
					"tagValues":{ "value": "[parameters('tagValues')]" }
				}
			}
		},
		{
			"type": "Microsoft.Resources/deployments",
			"condition": "[variables('provisionApp')]",
			"apiVersion": "[variables('deploymentApiVersion')]",
			"name": "appTemplate",
			"dependsOn": [
				"networkTemplate",
				"dagTemplate"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[concat(parameters('templateBaseUrl'), parameters('artifactLocation'), 'modules/application/application.json')]",
					"contentVersion": "[variables('contentVersion')]"
				},
				"parameters": {
					"adminUsername":{ "value": "[variables('adminUsername')]" },
					"sshKey":{ "value": "[parameters('sshKey')]" },
					"instanceName":{ "value": "[variables('appInstanceName')]" },
					"instanceType":{ "value": "[variables('appInstanceType')]" },
					"subnetId":{ "value": "[last(reference('networkTemplate').outputs.subnets.value)]" },
					"nsgId":{ "value": "[if(equals(parameters('numNics'), 1), reference('dagTemplate').outputs.nsg0Id.value, reference('dagTemplate').outputs.nsg1Id.value)]" },	
					"appContainer":{ "value": "[parameters('appContainerName')]" },
					"cloudInitDeliveryLocation":{ "value": "[variables('cloudInitDeliveryLocation')]" },
					"tagValues":{ "value": "[parameters('tagValues')]" }
				}
			}
		},
		{
			"type": "Microsoft.Resources/deployments",
			"apiVersion": "[variables('deploymentApiVersion')]",
			"name": "bigipTemplate",
			"dependsOn": [
				"networkTemplate",
				"dagTemplate"
			],
			"properties": {
				"mode": "Incremental",
				"templateLink": {
					"uri": "[concat(parameters('templateBaseUrl'), parameters('artifactLocation'), 'modules/bigip-standalone/bigip.json')]",
					"contentVersion": "[variables('contentVersion')]"
				},
				"parameters": {
					"adminUsername":{ "value": "[variables('adminUsername')]" },
					"image":{ "value": "[parameters('image')]" },
					"instanceType":{ "value": "[parameters('instanceType')]" },
					"loadBalancerBackendAddressPoolsArray":{ "value": [] },
					"mgmtSubnetId":{ "value": "[reference('networkTemplate').outputs.subnets.value[0]]" },
					"mgmtNsgID":{ "value": "[reference('dagTemplate').outputs.nsg0Id.value]" },
					"mgmtPublicIpId":{ "value": "[if(parameters('usePublicMgmtAddress'), reference('dagTemplate').outputs.mgmtIpIds.value[0], '')]" },
					"mgmtSelfIp":{ "value": "[variables('mgmtSelfIp')]" },
					"nic1SubnetId":{ "value": "[if(greaterOrEquals(parameters('numNics'), 2), reference('networkTemplate').outputs.subnets.value[1], '')]" },
					"nic1NsgId":{ "value": "[if(greaterOrEquals(parameters('numNics'), 2), reference('dagTemplate').outputs.nsg1Id.value, '')]" },
					"nic1PrimaryPublicId":{ "value": "[if(greaterOrEquals(parameters('numberPublicExternalIPAddresses'), 1), reference('dagTemplate').outputs.externalIpIds.value[0], '')]" },
					"nic1SelfIp":{ "value": "[variables('nic1SelfIp')]" },
					"nic1ServiceIPs":{ "value": [{"publicIpId":"[if(greaterOrEquals(parameters('numberPublicExternalIPAddresses'), 2), reference('dagTemplate').outputs.externalIpIds.value[1], '')]","privateIpAddress":"[variables('nic1ServiceIP1')]"},{"publicIpId":"[if(greaterOrEquals(parameters('numberPublicExternalIPAddresses'), 3), reference('dagTemplate').outputs.externalIpIds.value[2], '')]","privateIpAddress":"[variables('nic1ServiceIP2')]"},{"publicIpId":"[if(greaterOrEquals(parameters('numberPublicExternalIPAddresses'), 4), reference('dagTemplate').outputs.externalIpIds.value[3], '')]","privateIpAddress":"[variables('nic1ServiceIP3')]"}] },
					"nic2SubnetId":{ "value": "[if(greaterOrEquals(parameters('numNics'), 3), reference('networkTemplate').outputs.subnets.value[2], '')]" },
					"nic2NsgId":{ "value": "[if(greaterOrEquals(parameters('numNics'), 3), reference('dagTemplate').outputs.nsg2Id.value, '')]" },
					"nic2PrimaryPublicId":{ "value": "" },					
					"nic2SelfIp":{ "value": "[variables('nic2SelfIp')]" },
					"nic2ServiceIPs":{ "value": [{"privateIpAddress":"[variables('nic2ServiceIP1')]"}] },
					"roleDefinitionId":{ "value": "" },
					"runtimeConfig":{ "value": "[parameters('bigIpRuntimeInitConfig')]" },
					"sshKey":{ "value": "[parameters('sshKey')]" },
					"tagValues":{ "value": "[parameters('tagValues')]" },
					"uniqueString":{ "value": "[variables('uniqueString')]" },
					"useAvailabilityZones":{ "value": "[parameters('useAvailabilityZones')]" },
					"userAssignManagedIdentity":{ "value": "" },
					"vmName":{ "value": "[variables('vmName')]" }
				}
			}
		}
	],
	"outputs": {
		"virtualNetworkId": {
            "type": "String",
            "value": "[reference('networkTemplate').outputs.virtualNetwork.value]"
        },
		"mgmtPublicIp": {
			"condition": "[parameters('usePublicMgmtAddress')]",
            "type": "String",
            "value": "[reference('dagTemplate').outputs.mgmtIps.value[0]]"
        },
		"mgmtPrivateIp": {
            "type": "String",
            "value": "[variables('mgmtSelfIp')]"
        },
		"mgmtPublicUrl": {
			"condition": "[parameters('usePublicMgmtAddress')]",
            "type": "String",
            "value": "[if(equals(parameters('numNics'), 1), concat('https://', reference('dagTemplate').outputs.mgmtIps.value[0], ':8443/'), concat('https://', reference('dagTemplate').outputs.mgmtIps.value[0], ':443/'))]"
        },
		"mgmtPrivateUrl": {
            "type": "String",
            "value": "[if(equals(parameters('numNics'), 1), concat('https://', variables('mgmtSelfIp'), ':8443/'), concat('https://', variables('mgmtSelfIp'), ':443/'))]"
        },
		"appVmName": {
			"condition": "[variables('provisionApp')]",
            "type": "String",
            "value": "[variables('appInstanceName')]"
        },
		"appPublicIps": {
			"condition": "[variables('provisionApp')]",
            "type": "array",
            "value": "[reference('dagTemplate').outputs.externalIps.value]"
        },
		"appPrivateIp": {
			"condition": "[variables('provisionApp')]",
            "type": "String",
            "value": "[reference('appTemplate').outputs.appIp.value]"
        },
		"vip1PrivateIp": {
            "type": "string",
            "value": "[variables('nic1ServiceIP1')]"
        },
		"vip1PublicIp": {
			"condition": "[greaterOrEquals(parameters('numberPublicExternalIPAddresses'), 2)]",
            "type": "string",
            "value": "[reference('dagTemplate').outputs.externalIps.value[1]]"
        },
		"vip1PublicIPDns": {
			"condition": "[greaterOrEquals(parameters('numberPublicExternalIPAddresses'), 2)]",
            "type": "string",
            "value": "[reference('dagTemplate').outputs.externalIpDns.value[1]]"
        },
		"vip1PrivateUrlHttp": {
            "type": "string",
            "value": "[concat('http://', variables('nic1ServiceIP1'), '/')]"
        },
		"vip1PublicUrlHttp": {
			"condition": "[greaterOrEquals(parameters('numberPublicExternalIPAddresses'), 2)]",
            "type": "string",
            "value": "[concat('http://', reference('dagTemplate').outputs.externalIps.value[1], '/')]"
        },
		"vip1PrivateUrlHttps": {
            "type": "string",
            "value": "[concat('https://', variables('nic1ServiceIP1'), '/')]"
        },
		"vip1PublicUrlHttps": {
			"condition": "[greaterOrEquals(parameters('numberPublicExternalIPAddresses'), 2)]",
            "type": "string",
            "value": "[concat('https://', reference('dagTemplate').outputs.externalIps.value[1], '/')]"
        },
		"vip2PrivateIp": {
            "type": "string",
            "value": "[variables('nic1ServiceIP2')]"
        },
		"vip2PublicIp": {
			"condition": "[greaterOrEquals(parameters('numberPublicExternalIPAddresses'), 3)]",
            "type": "string",
            "value": "[reference('dagTemplate').outputs.externalIps.value[2]]"
        },
		"vip2PublicIPDns": {
			"condition": "[greaterOrEquals(parameters('numberPublicExternalIPAddresses'), 3)]",
            "type": "string",
            "value": "[reference('dagTemplate').outputs.externalIpDns.value[2]]"
        },
		"vip2PrivateUrlHttp": {
            "type": "string",
            "value": "[concat('http://', variables('nic1ServiceIP2'), '/')]"
        },
		"vip2PublicUrlHttp": {
			"condition": "[greaterOrEquals(parameters('numberPublicExternalIPAddresses'), 3)]",
            "type": "string",
            "value": "[concat('http://', reference('dagTemplate').outputs.externalIps.value[2], '/')]"
        },
		"vip2PrivateUrlHttps": {
            "type": "string",
            "value": "[concat('https://', variables('nic1ServiceIP2'), '/')]"
        },
		"vip2PublicUrlHttps": {
			"condition": "[greaterOrEquals(parameters('numberPublicExternalIPAddresses'), 3)]",
            "type": "string",
            "value": "[concat('https://', reference('dagTemplate').outputs.externalIps.value[2], '/')]"
        },
		"appUsername": {
			"condition": "[variables('provisionApp')]",
            "type": "String",
            "value": "[variables('adminUsername')]"
        },
		"vmId": {
            "type": "String",
            "value": "[reference('bigipTemplate').outputs.vmID.value]"
        },		
		"bigipUsername": {
            "type": "String",
            "value": "[variables('adminUsername')]"
        }
	}
}